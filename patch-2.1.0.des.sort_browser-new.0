From 1cb4e93edd332de82d6c7d5c4689f5996bfd937a Mon Sep 17 00:00:00 2001
From: Derek Schrock <dereks@lifeofadishwasher.com>
Date: Mon, 14 Jun 2021 17:01:40 -0400
Subject: [PATCH] 2.1.0 sort_browser new

---
 PATCHES   |  1 +
 browser.c | 25 ++++++++++++++++++++++---
 init.h    |  2 ++
 sort.h    |  1 +
 4 files changed, 26 insertions(+), 3 deletions(-)

diff --git PATCHES PATCHES
index e69de29b..ecd006b3 100644
--- PATCHES
+++ PATCHES
@@ -0,0 +1 @@
+patch-2.1.0.des.sort_browser-new.0
diff --git browser.c browser.c
index 060eee36..0f959759 100644
--- browser.c
+++ browser.c
@@ -114,6 +114,18 @@ static int browser_compare_date (const void *a, const void *b)
   return (sort_reverse_flag ? -r : r);
 }
 
+static int browser_compare_new (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+  int r = 0;
+
+  r = pa->new - pb->new;
+
+  return (sort_reverse_flag ? -r : r);
+}
+
+
 static int browser_compare_size (const void *a, const void *b)
 {
   struct folder_file *pa = (struct folder_file *) a;
@@ -157,6 +169,9 @@ static void browser_sort (struct browser_state *state)
     case SORT_ORDER:
       f = browser_compare_order;
       break;
+    case SORT_NEW:
+      f = browser_compare_new;
+      break;
     case SORT_DATE:
       f = browser_compare_date;
       break;
@@ -212,9 +227,9 @@ static int select_sort (struct browser_state *state, int reverse)
   int new_sort;
 
   switch (mutt_multi_choice ((reverse) ?
-           _("Reverse sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? ") :
-           _("Sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? "),
-           _("dazcun")))
+           _("Reverse sort by (d)ate, (a)lpha, si(z)e, (N)ew (c)ount, (u)nread, or do(n)'t sort? ") :
+           _("Sort by (d)ate, (a)lpha, si(z)e, (N)ew, (c)ount, (u)nread, or do(n)'t sort? "),
+           _("dazcunN")))
   {
     case 1: /* (d)ate */
       new_sort = SORT_DATE;
@@ -240,6 +255,10 @@ static int select_sort (struct browser_state *state, int reverse)
       new_sort = SORT_ORDER;
       break;
 
+    case 7: /* (N)ew */
+      BrowserSort = SORT_NEW;
+      break;
+
     case -1: /* abort */
     default:
       resort = 0;
diff --git init.h init.h
index acc7d8b2..5ff65d74 100644
--- init.h
+++ init.h
@@ -136,6 +136,7 @@ const struct mapping_t SortBrowserMethods[] = {  /* DT_SORT_BROWSER */
   { "size",	SORT_SIZE },
   { "alpha",	SORT_SUBJECT },
   { "unread",	SORT_UNREAD },
+  { "new", SORT_NEW },
   { NULL,       0 }
 };
 
@@ -4039,6 +4040,7 @@ struct option_t MuttVars[] = {
   ** .dd mailbox-order (unsorted)
   ** .dd score
   ** .dd size
+  ** .dd new
   ** .dd spam
   ** .dd subject
   ** .dd threads
diff --git sort.h sort.h
index af239390..fea21884 100644
--- sort.h
+++ sort.h
@@ -35,6 +35,7 @@
 #define SORT_FLAGGED	17
 #define SORT_PATH	18
 #define SORT_LABEL	19
+#define SORT_NEW        20
 
 /* Sort and sort_aux are shorts, and are a composite of a
  * constant sort operation number and a set of compounded
-- 
2.31.1

