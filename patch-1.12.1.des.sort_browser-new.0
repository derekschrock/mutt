From 789d5717ae0a0fd7f7517adaa013fbf9bd6f973c Mon Sep 17 00:00:00 2001
From: Derek Schrock <dereks@lifeofadishwasher.com>
Date: Sat, 15 Jun 2019 18:45:14 -0400
Subject: [PATCH] sort_browser 1.12.1

---
 PATCHES   |  1 +
 browser.c | 24 +++++++++++++++++++++---
 init.h    |  2 ++
 sort.h    |  1 +
 4 files changed, 25 insertions(+), 3 deletions(-)

diff --git PATCHES PATCHES
index e69de29b..310ab2e0 100644
--- PATCHES
+++ PATCHES
@@ -0,0 +1 @@
+patch-1.12.1.des.sort_browser-new.0
diff --git browser.c browser.c
index 973e17ae..5af420d6 100644
--- browser.c
+++ browser.c
@@ -101,6 +101,17 @@ static int browser_compare_date (const void *a, const void *b)
   return ((BrowserSort & SORT_REVERSE) ? -r : r);
 }
 
+static int browser_compare_new (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+  int r = 0;
+
+  r = pa->new - pb->new;
+
+  return ((BrowserSort & SORT_REVERSE) ? -r : r);
+}
+
 static int browser_compare_size (const void *a, const void *b)
 {
   struct folder_file *pa = (struct folder_file *) a;
@@ -139,6 +150,9 @@ static void browser_sort (struct browser_state *state)
   {
     case SORT_ORDER:
       return;
+    case SORT_NEW:
+      f = browser_compare_new;
+      break;
     case SORT_DATE:
       f = browser_compare_date;
       break;
@@ -1270,9 +1284,9 @@ void _mutt_buffer_select_file (BUFFER *f, int flags, char ***files, int *numfile
         int reverse = (op == OP_SORT_REVERSE);
 
         switch (mutt_multi_choice ((reverse) ?
-            _("Reverse sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? ") :
-            _("Sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? "),
-            _("dazcun")))
+	      _("Reverse sort by (d)ate, (a)lpha, si(z)e, (N)ew (c)ount, (u)nread, or do(n)'t sort? ") :
+	      _("Sort by (d)ate, (a)lpha, si(z)e, (N)ew, (c)ount, (u)nread, or do(n)'t sort? "),
+	      _("dazcunN")))
         {
           case -1: /* abort */
             resort = 0;
@@ -1302,6 +1316,10 @@ void _mutt_buffer_select_file (BUFFER *f, int flags, char ***files, int *numfile
             BrowserSort = SORT_ORDER;
             resort = 0;
             break;
+
+            case 7: /* (N)ew */
+	      BrowserSort = SORT_NEW;
+	      break;
         }
         if (resort)
         {
diff --git init.h init.h
index cc8c7f47..b03099f6 100644
--- init.h
+++ init.h
@@ -3651,6 +3651,7 @@ struct option_t MuttVars[] = {
   ** .dd count
   ** .dd date
   ** .dd size
+  ** .dd new
   ** .dd unread
   ** .dd unsorted
   ** .ie
@@ -4282,6 +4283,7 @@ const struct mapping_t SortBrowserMethods[] = {
   { "size",	SORT_SIZE },
   { "unread",	SORT_UNREAD },
   { "unsorted",	SORT_ORDER },
+  { "new",	SORT_NEW },
   { NULL,       0 }
 };
 
diff --git sort.h sort.h
index 0a6450e9..c59a887f 100644
--- sort.h
+++ sort.h
@@ -36,6 +36,7 @@
 #define SORT_FLAGGED	17
 #define SORT_PATH	18
 #define SORT_LABEL	19
+#define SORT_NEW	20
 
 /* Sort and sort_aux are shorts, and are a composite of a
  * constant sort operation number and a set of compounded
-- 
2.21.0

