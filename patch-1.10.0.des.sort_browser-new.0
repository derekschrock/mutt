From 465d829af0249589628f9aeb96100022aceeedab Mon Sep 17 00:00:00 2001
From: Derek Schrock <dereks@lifeofadishwasher.com>
Date: Mon, 21 May 2018 22:17:04 -0400
Subject: [PATCH] 1.10.0 sort_browser-new

---
 PATCHES                            |   1 +
 browser.c                          |  24 ++++++-
 init.h                             |   2 +
 sort.h                             |   1 +
 5 files changed, 134 insertions(+), 3 deletions(-)

diff --git PATCHES PATCHES
index e69de29b..5b3d9cde 100644
--- PATCHES
+++ PATCHES
@@ -0,0 +1 @@
+patch-1.10.0.des.sort_browser-new.0
diff --git browser.c browser.c
index c7e58b68..26ebbf01 100644
--- browser.c
+++ browser.c
@@ -95,6 +95,17 @@ static int browser_compare_date (const void *a, const void *b)
   return ((BrowserSort & SORT_REVERSE) ? -r : r);
 }
 
+static int browser_compare_new (const void *a, const void *b)
+{
+  struct folder_file *pa = (struct folder_file *) a;
+  struct folder_file *pb = (struct folder_file *) b;
+  int r = 0;
+
+  r = pa->new - pb->new;
+
+  return ((BrowserSort & SORT_REVERSE) ? -r : r);
+}
+
 static int browser_compare_size (const void *a, const void *b)
 {
   struct folder_file *pa = (struct folder_file *) a;
@@ -133,6 +144,9 @@ static void browser_sort (struct browser_state *state)
   {
     case SORT_ORDER:
       return;
+    case SORT_NEW:
+      f = browser_compare_new;
+      break;
     case SORT_DATE:
       f = browser_compare_date;
       break;
@@ -1197,9 +1211,9 @@ void _mutt_select_file (char *f, size_t flen, int flags, char ***files, int *num
 	  int reverse = (i == OP_SORT_REVERSE);
 	  
 	  switch (mutt_multi_choice ((reverse) ?
-	      _("Reverse sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? ") :
-	      _("Sort by (d)ate, (a)lpha, si(z)e, (c)ount, (u)nread, or do(n)'t sort? "),
-	      _("dazcun")))
+	      _("Reverse sort by (d)ate, (a)lpha, si(z)e, (N)ew (c)ount, (u)nread, or do(n)'t sort? ") :
+	      _("Sort by (d)ate, (a)lpha, si(z)e, (N)ew, (c)ount, (u)nread, or do(n)'t sort? "),
+	      _("dazcunN")))
 	  {
 	    case -1: /* abort */
 	      resort = 0;
@@ -1229,6 +1243,10 @@ void _mutt_select_file (char *f, size_t flen, int flags, char ***files, int *num
 	      BrowserSort = SORT_ORDER;
 	      resort = 0;
 	      break;
+
+            case 7: /* (N)ew */
+	      BrowserSort = SORT_NEW;
+	      break;
 	  }
 	  if (resort)
 	  {
diff --git init.h init.h
index 6c443945..fd6099da 100644
--- init.h
+++ init.h
@@ -3424,6 +3424,7 @@ struct option_t MuttVars[] = {
   ** .dd count
   ** .dd date
   ** .dd size
+  ** .dd new
   ** .dd unread
   ** .dd unsorted
   ** .ie
@@ -4053,6 +4054,7 @@ const struct mapping_t SortBrowserMethods[] = {
   { "size",	SORT_SIZE },
   { "unread",	SORT_UNREAD },
   { "unsorted",	SORT_ORDER },
+  { "new",	SORT_NEW },
   { NULL,       0 }
 };
 
diff --git sort.h sort.h
index b5bf9c87..be96ba65 100644
--- sort.h
+++ sort.h
@@ -36,6 +36,7 @@
 #define SORT_FLAGGED	17
 #define SORT_PATH	18
 #define SORT_LABEL	19
+#define SORT_NEW	20
 
 /* Sort and sort_aux are shorts, and are a composite of a
  * constant sort operation number and a set of compounded
-- 
2.17.0

